//MANNY CODE for querying database

//TODO: read data from the biscuits table

//TODO: read data from biscuits and customers
app.get("/biscuits-customers", async (_, res) => {
  try {
    const data = await db.query(`
SELECT biscuits.biscuit_name AS "biscuitName", biscuits.src AS "imageLink", biscuits.description, biscuits.crunchiness, customers.customer_name AS "customerName"
FROM customers JOIN biscuits ON biscuits.customer_id = customers.id;`);
    res.json(data.rows);
  } catch (error) {
    console.error("Error in the biscuits-customers route", error);
    res.status(500).json({ success: false });
  }
});

//TODO: create new data in the biscuits table
app.post("/add-biscuit", (req, res) => {
  // const biscuitData = req.body;
  //destructure the body (alternative)
  const { biscuitName, src, description, crunchiness, customerId } = req.body;

  try {
    const query = db.query(
      `INSERT INTO biscuits (biscuit_name, src, description, crunchiness, customer_id) VALUES 
($1, $2, $3, $4, $5);`,
      [biscuitName, src, description, crunchiness, customerId]
    );
    res.status(200).json({ success: true });
  } catch (error) {
    console.error("Error in add-biscuit route", error);
    res.status(500).json({ success: false });
  }
});

<div className=""></div>;
//TODO: update an entry in the biscuits table
app.put("/update-biscuit/:id", (req, res) => {
  try {
    //you could destructure params and body
    const paramsId = req.params.id;
    const newData = req.body;
    // query my database to update ONE entry
    //what specific entry? --> dynamic parameter
    //what data do you want to add in place for the current data? --> body

    const query = db.query(
      `UPDATE biscuits SET biscuit_name = $1, src= $2, description= $3, crunchiness= $4, customer_id = $5 WHERE id = $6 RETURNING *;`,
      [
        newData.biscuitName,
        newData.src,
        newData.description,
        newData.crunchiness,
        newData.customerId,
        paramsId,
      ]
    );
  } catch (error) {
    console.error("Error in update-biscuit route", error);
    res.status(500).json({ success: false });
  }

//MANNY POLLING DEMO
  
//TODO: set up a system for the page to get refreshed at intervals --> interval
//timers are effects!

import { useState, useEffect } from "react";

export default function FoxImage() {
  //data storage
  const [foxImage, setFoxImage] = useState(null); // image appears broken at first because of the initial value being "" or null;

  useEffect(() => {
    //retrieve
    async function getFoxData() {
      //you can use try and catch in the client, especially when connecting to external APIs / servers
      try {
        const response = await fetch("https://randomfox.ca/floof/");
        const data = await response.json();
        const wrangledData = data.image; //image is the name of the property in the API
        setFoxImage(wrangledData);
      } catch (error) {
        console.error("API failed to fetch", error);
      }
    }
    getFoxData(); //in dev environment, this triggers twice; in production, it doesn't trigger twice

    //set an interval that fetches the data every 3 seconds, in this case
    const foxesInterval = setInterval(getFoxData, 3000);

    //to avoid intervals stacking every 3 seconds due to the component updating (lifecycle), we need to clear it, so when the component updates, a fresh interval is created
    return () => clearInterval(foxesInterval);
  }, []);

  return (
    <>
      <h1>Fox Image</h1>
      <img src={foxImage} alt="random image of a fox" />
    </>
  );
}